// Generated by CoffeeScript 1.7.1

/* INITIALIZE DATA */
var country_code, data, drag, drag_data, everything, formals, grab, hover_in, hover_out, p, path, paths, rc, release, s, set_transform, w, world, zoom_handler;

formals = {};

paths = {};

p = {
  zoom: 1.0,
  width: base_scale * base_width,
  height: base_scale * base_height,
  x_trans: 0,
  y_trans: 0,
  scale: base_scale
};

drag_data = {};


/* DEFINE HANDLERS */

hover_in = function(e) {};

hover_out = function(e) {};

set_transform = function() {
  return w.transform("scale(" + p.scale + ") translate(" + p.x_trans + ", " + p.y_trans + ")");
};

zoom_handler = function(e) {
  var direction, x, y, _ref, _ref1, _ref2;
  if (e.wheelDelta != null) {
    direction = e.wheelDelta > 0 ? 1 : -1;
  } else if (e.detail != null) {
    direction = e.detail > 0 ? -1 : 1;
  } else {
    return;
  }
  x = (_ref = e.layerX) != null ? _ref : e.originalEvent.layerX;
  y = (_ref1 = e.layerY) != null ? _ref1 : e.originalEvent.layerY;
  console.log("zoom zoom zoom " + direction + " " + x + " " + y);
  _ref2 = calculate_scale(x, y, direction, p.width, p.height, p.x_trans, p.y_trans, p.scale), p.x_trans = _ref2[0], p.y_trans = _ref2[1], p.scale = _ref2[2];
  set_transform();
  e.preventDefault();
  return false;
};

grab = function(e) {
  drag_data.grab_x = e.pageX;
  drag_data.grab_y = e.pageY;
  drag_data.last_x = e.pageX;
  return drag_data.last_y = e.pageY;
};

drag = function(e) {
  var x, x_trans, y, y_trans, _ref;
  drag_data.drag_amount = 0;
  if ((drag_data.last_x != null) && (drag_data.last_y != null)) {
    x = e.pageX;
    y = e.pageY;
    x_trans = p.x_trans + (x - drag_data.last_x) / p.scale;
    y_trans = p.y_trans + (y - drag_data.last_y) / p.scale;
    _ref = adjust_trans(x_trans, y_trans, p.width, p.height, p.scale), p.x_trans = _ref[0], p.y_trans = _ref[1];
    drag_data.last_x = x;
    drag_data.last_y = y;
    return set_transform();
  }
};

rc = 0;

release = function() {
  drag_data.drag_amount = Math.max(Math.abs(drag_data.last_x - drag_data.grab_x), Math.abs(drag_data.last_y - drag_data.grab_y));
  drag_data.last_x = void 0;
  drag_data.last_y = void 0;
  return console.log("release " + (rc += 1));
};


/* INITIALIZE WORLD */

s = Snap("#world");

w = s.g().attr({
  id: "w"
});

for (country_code in initial_countries) {
  data = initial_countries[country_code];
  formals[country_code] = data.formal;
  path = s.path("" + data.d).attr({
    id: country_code,
    "class": fills[country_code]
  }).hover(hover_in, hover_out);
  w.add(path);
  paths[country_code] = path;
}

s.attr({
  width: p.width,
  height: p.height
});

set_transform();


/* SET HANDLERS */

s.mousedown(grab);

s.mousemove(drag);

world = document.getElementById("world");

if (world.onmousewheel !== void 0) {
  world.onmousewheel = zoom_handler;
} else {
  world.addEventListener("mousewheel", zoom_handler, false);
  world.addEventListener("DOMMouseScroll", zoom_handler, false);
}

everything = document.getElementById("everything");

if (everything.onmouseup !== void 0) {
  everything.onmouseup = release;
} else {
  everything.addEventListener("mouseup", release, false);
}
