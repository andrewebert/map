// Generated by CoffeeScript 1.7.1
var MapCtrl;

MapCtrl = function($scope) {
  var Color, MIN_DRAG_THRESHOLD;
  Color = net.brehaut.Color;
  $scope.formal = "";
  $scope.flag = void 0;
  $scope.loading = false;
  $scope.label = {
    x: 0,
    y: 0,
    visible: false,
    flip: "noflip"
  };
  $scope.get_d = function(code, country) {
    if ((country != null ? country.d : void 0) != null) {
      return country.d;
    } else {
      console.log("Missing d");
      console.log($scope.time, code, country);
      return "";
    }
  };
  $scope.country = function(code) {
    var countries;
    countries = $scope.countries[$scope.time];
    if (countries != null) {
      return countries[code];
    }
  };
  $scope.selected = function() {
    var code, _ref, _ref1;
    code = (_ref = $scope.hard_selected) != null ? _ref : $scope.soft_selected;
    if (code) {
      return (_ref1 = $scope.country(code)) != null ? _ref1.code : void 0;
    }
  };
  $scope.curr = function() {
    var selected;
    selected = $scope.selected();
    if (selected) {
      return $scope.country(selected);
    }
  };
  $scope.formal = function() {
    var _ref;
    return (_ref = $scope.curr()) != null ? _ref.formal : void 0;
  };
  $scope.owner = function() {
    var o, owners;
    owners = $scope.get_owners($scope.curr());
    if (owners) {
      owners = (function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = owners.length; _i < _len; _i++) {
          o = owners[_i];
          _results.push((_ref = $scope.country(o)) != null ? _ref.name : void 0);
        }
        return _results;
      })();
      if (owners.length > 1) {
        owners = owners.slice(0, -1).join(", ") + " and " + owners[owners.length - 1];
      } else {
        owners = owners[0];
      }
      return "(" + owners + ")";
    }
  };
  $scope.get_owners = function(country) {
    var owner;
    owner = country != null ? country.owner : void 0;
    if (owner) {
      return owner.split(" ");
    }
  };
  $scope.link = function() {
    var _ref;
    return (_ref = $scope.curr()) != null ? _ref.link : void 0;
  };
  $scope.disputed = function() {
    var _ref;
    return (_ref = $scope.curr()) != null ? _ref.disputed : void 0;
  };
  $scope.flag = function() {
    return $scope.get_flag($scope.curr());
  };
  $scope.get_flag = function(country) {
    var flag, owners;
    flag = country != null ? country.flag : void 0;
    if (flag === "") {
      owners = $scope.get_owners(country);
      if (owners) {
        return $scope.get_flag($scope.country(owners[0]));
      }
    }
    if ((!flag) || (flag in $scope.flags)) {
      return flag;
    } else if (!$scope.loading || !($scope.loading === flag)) {
      $scope.loading = flag;
      $scope.load_image(flag, function(src, image) {
        $scope.loading = false;
        $scope.flags[src] = image;
        return $scope.$apply();
      });
      return "";
    }
  };
  MIN_DRAG_THRESHOLD = 10;
  $scope.hard_select = function(code, e) {
    if ($scope.drag_amount < MIN_DRAG_THRESHOLD) {
      console.log("hard selected", code);
      if ($scope.hard_selected === code) {
        $scope.hard_selected = void 0;
      } else {
        $scope.hard_selected = code;
      }
      return e.stopPropagation();
    }
  };
  $scope.soft_select = function(code, e) {
    if (!$scope.dragging) {
      $scope.label.visible = true;
      return $scope.soft_selected = code;
    }
  };
  $scope.deselect = function() {
    if (!$scope.dragging) {
      $scope.label.visible = false;
      return $scope.soft_selected = void 0;
    }
  };
  return $scope.label.text = function() {
    if ($scope.soft_selected != null) {
      return $scope.country($scope.soft_selected).name;
    } else {
      return "";
    }
  };
};
