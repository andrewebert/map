// Generated by CoffeeScript 1.7.1
app.directive('transformable', function($window) {
  return function($scope) {
    var MAX_ZOOM, scale_step;
    scale_step = 1.3;
    MAX_ZOOM = 12;
    $scope.drag_amount = 0;
    $scope.dragging = false;
    $scope.x_trans = 0;
    $scope.y_trans = 0;
    $scope.zoom_level = 0;
    $scope.initializeWindowSize = function() {
      var BASE_HEIGHT, BASE_WIDTH, MARGIN_BOTTOM, MARGIN_LEFT, MARGIN_RIGHT, MARGIN_TOP, TIMELINE_HEIGHT, height, width;
      MARGIN_LEFT = 10;
      MARGIN_RIGHT = 10;
      MARGIN_TOP = 10;
      MARGIN_BOTTOM = 10;
      BASE_WIDTH = 1000;
      BASE_HEIGHT = 506;
      TIMELINE_HEIGHT = 57;
      width = window.innerWidth - MARGIN_LEFT - MARGIN_RIGHT;
      height = window.innerHeight - MARGIN_TOP - MARGIN_BOTTOM - TIMELINE_HEIGHT;
      $scope.base_scale = Math.max(Math.min(width / BASE_WIDTH, height / BASE_HEIGHT), 1);
      $scope.mapWidth = BASE_WIDTH * $scope.base_scale;
      $scope.mapHeight = BASE_HEIGHT * $scope.base_scale;
      return $scope.calculate_scale(0, 0, 0);
    };
    angular.element($window).bind('resize', function() {
      $scope.initializeWindowSize();
      return $scope.$apply();
    });
    $scope.calculate_scale = function(x, y, direction) {
      var translation_factor;
      $scope.scale = $scope.base_scale * Math.pow(scale_step, $scope.zoom_level);
      translation_factor = 1 - Math.pow(scale_step, direction);
      return $scope.translate(translation_factor * x, translation_factor * y);
    };
    $scope.translate = function(dx, dy) {
      var max_x_trans, max_y_trans, min_x_trans, min_y_trans, scale_factor;
      $scope.x_trans += dx / $scope.scale;
      $scope.y_trans += dy / $scope.scale;
      max_x_trans = 0;
      max_y_trans = 0;
      scale_factor = 1 / $scope.scale - 1 / $scope.base_scale;
      min_x_trans = $scope.mapWidth * scale_factor;
      min_y_trans = $scope.mapHeight * scale_factor;
      $scope.x_trans = Math.max(Math.min($scope.x_trans, max_x_trans), min_x_trans);
      return $scope.y_trans = Math.max(Math.min($scope.y_trans, max_y_trans), min_y_trans);
    };
    $scope.zoom = function(direction, x, y) {
      var new_zoom;
      if (x == null) {
        x = $scope.mapWidth / 2;
      }
      if (y == null) {
        y = $scope.mapHeight / 2;
      }
      new_zoom = $scope.zoom_level + direction;
      if (new_zoom >= 0 && new_zoom <= MAX_ZOOM) {
        $scope.zoom_level = new_zoom;
        return $scope.calculate_scale(x, y, direction);
      }
    };
    $scope.mousewheel = function(e, d, dx, dy) {
      var direction, x, y, _ref, _ref1;
      x = (_ref = e.layerX) != null ? _ref : e.originalEvent.layerX;
      y = (_ref1 = e.layerY) != null ? _ref1 : e.originalEvent.layerY;
      direction = dy;
      $scope.zoom(direction, x, y);
      return e.preventDefault();
    };
    $scope.grab = function(e) {
      $scope.dragging = true;
      $scope.grab_x = e.pageX;
      $scope.grab_y = e.pageY;
      $scope.last_x = e.pageX;
      return $scope.last_y = e.pageY;
    };
    $scope.drag = function(e) {
      var x, y;
      $scope.drag_amount = 0;
      if (($scope.last_x != null) && ($scope.last_y != null)) {
        x = e.pageX;
        y = e.pageY;
        $scope.translate(x - $scope.last_x, y - $scope.last_y);
        $scope.last_x = x;
        return $scope.last_y = y;
      }
    };
    $scope.release = function() {
      $scope.dragging = false;
      $scope.drag_amount = Math.max(Math.abs($scope.last_x - $scope.grab_x), Math.abs($scope.last_y - $scope.grab_y));
      $scope.last_x = void 0;
      return $scope.last_y = void 0;
    };
    $scope.move_label = function(e) {
      var l, left_edge;
      $scope.label.x = e.clientX + $window.scrollX;
      $scope.label.y = e.clientY + $window.scrollY;
      l = document.getElementById("label");
      left_edge = $scope.label.y < 168 ? 80 : 15;
      if (e.clientX - l.offsetWidth < left_edge) {
        return $scope.label.flip = "flip";
      } else {
        return $scope.label.flip = "noflip";
      }
    };
    return $scope.initializeWindowSize();
  };
});
